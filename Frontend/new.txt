json-server --watch db.json --port 3001

table user
id int pk
name string 
email string pk
password string
termsAccepted bool

table events
id int pk
name string
place string
date string
organizer string
organization string
description string
image string
capacity int
smallDescription string
location string
type string
guest string
gmap string
organizationDetails string
inclusive list of string
exclusive list of string

table contactus
name string
email string
message string
sendCopy bool
id int

table event_register
id pk
userid fk from usertable id
eventid fk from events table id
firstName string
lastName string
email string
age int
bussinessName string
organizationName string
city string
state string
zipcode int







import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const DashEventAdd = () => {
  const { id } = useParams(); // id may be used for existing events; for new events, it can be optional
  const navigate = useNavigate();
  const [event, setEvent] = useState({
    trend: 0,
    name: '',
    place: '',
    date: '',
    organizer: '',
    organization: '',
    description: '',
    image: '', // This will store the filename
    capacity: 0,
    small_description: '',
    location: '',
    type: '',
    guest: '',
    gmap: '',
    organization_details: '',
    inclusive: [],
    exclusive: [],
  });
  const [imageFile, setImageFile] = useState(null);

  useEffect(() => {
    if (id) {
      const fetchEvent = async () => {
        try {
          const response = await axios.get(`http://localhost:3001/events/${id}`);
          setEvent(response.data);
        } catch (error) {
          console.error('Error fetching event data:', error);
        }
      };

      fetchEvent();
    }
  }, [id]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setEvent((prevEvent) => ({
      ...prevEvent,
      [name]: value,
    }));
  };

  const handleListChange = (type, index, value) => {
    setEvent((prevEvent) => {
      const list = [...prevEvent[type]];
      list[index] = value;
      return { ...prevEvent, [type]: list };
    });
  };

  const handleFileChange = (e) => {
    setImageFile(e.target.files[0]);
  };

  const handleSave = async () => {
    try {
      let imageUrl = event.image;

      if (imageFile) {
        const formData = new FormData();
        formData.append('image', imageFile);

        const imageUploadResponse = await axios.post('http://localhost:3001/upload', formData, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });

        // Save the filename returned from the server
        imageUrl = imageUploadResponse.data.imageFilename; // Adjust based on your server's response
      }

      const method = id ? 'put' : 'post'; // Use PUT for existing events, POST for new events
      const url = id ? `http://localhost:3001/events/${id}` : 'http://localhost:3001/events';

      await axios[method](url, { ...event, image: imageUrl });
      navigate('/dashboard/events');
    } catch (error) {
      console.error('Error saving event:', error);
    }
  };

  const handleDelete = async () => {
    try {
      if (id) {
        await axios.delete(`http://localhost:3001/events/${id}`);
      }
      navigate('/dashboard/events');
    } catch (error) {
      console.error('Error deleting event:', error);
    }
  };

  const handleAddField = (type) => {
    setEvent((prevEvent) => ({
      ...prevEvent,
      [type]: [...prevEvent[type], ''],
    }));
  };

  const handleRemoveField = (type, index) => {
    setEvent((prevEvent) => ({
      ...prevEvent,
      [type]: prevEvent[type].filter((_, i) => i !== index),
    }));
  };

  return (
    <div className="container mt-4">
      <h2>{id ? 'Edit Event' : 'Add Event'}</h2>
      <form>
        {/* Other fields */}

        <div className="mb-3">
          <label className="form-label">Place</label>
          <input
            type="text"
            className="form-control"
            name="place"
            value={event.place}
            onChange={handleChange}
          />
        </div>
        {/* Repeat similar blocks for other fields */}
        <div className="mb-3">
          <label className="form-label">Date</label>
          <input
            type="text"
            className="form-control"
            name="date"
            value={event.date}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Organizer</label>
          <input
            type="text"
            className="form-control"
            name="organizer"
            value={event.organizer}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Organization</label>
          <input
            type="text"
            className="form-control"
            name="organization"
            value={event.organization}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Description</label>
          <textarea
            className="form-control"
            name="description"
            value={event.description}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Small Description</label>
          <textarea
            className="form-control"
            name="small_description"
            value={event.small_description}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label"> Organization Details</label>
          <textarea
            className="form-control"
            name="organization_details"
            value={event.organization_details}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Location</label>
          <input
            type="text"
            className="form-control"
            name="location"
            value={event.location}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Type</label>
          <input
            type="text"
            className="form-control"
            name="type"
            value={event.type}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Guest</label>
          <input
            type="text"
            className="form-control"
            name="guest"
            value={event.guest}
            onChange={handleChange}
          />
        </div>
        <div className="mb-3">
          <label className="form-label">Capacity</label>
          <input
            type="number"
            className="form-control"
            name="capacity"
            value={event.capacity}
            onChange={handleChange}
          />
        </div>
  
        <div className="mb-3">
          <label className="form-label">Inclusive</label>
          {event.inclusive.map((item, index) => (
            <div className="d-flex mb-2" key={index}>
              <input
                type="text"
                className="form-control me-2"
                value={item}
                onChange={(e) => handleListChange('inclusive', index, e.target.value)}
              />
              <button
                type="button"
                className="btn btn-danger"
                onClick={() => handleRemoveField('inclusive', index)}
              >
                Remove
              </button>
            </div>
          ))}
          <button
            type="button"
            className="btn btn-primary"
            onClick={() => handleAddField('inclusive')}
          >
            Add Inclusive
          </button>
        </div>
        <div className="mb-3">
          <label className="form-label">Exclusive</label>
          {event.exclusive.map((item, index) => (
            <div className="d-flex mb-2" key={index}>
              <input
                type="text"
                className="form-control me-2"
                value={item}
                onChange={(e) => handleListChange('exclusive', index, e.target.value)}
              />
              <button
                type="button"
                className="btn btn-danger"
                onClick={() => handleRemoveField('exclusive', index)}
              >
                Remove
              </button>
            </div>
          ))}
          <button
            type="button"
            className="btn btn-primary"
            onClick={() => handleAddField('exclusive')}
          >
            Add Exclusive
          </button>
        </div>
        <button type="button" className="btn btn-primary" onClick={handleSave}>
          Save
        </button>
        {id && (
          <button type="button" className="btn btn-danger ms-2" onClick={handleDelete}>
            Delete
          </button>
        )}
      </form>
    </div>
  );
};

export default DashEventAdd;

